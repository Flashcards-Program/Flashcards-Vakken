name: Validate JSON (syntax + schema)

on:
  push:
  pull_request:

jobs:
  validate-json:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install validation dependency
        run: pip install jsonschema

      - name: Validate JSON syntax and schema
        run: |
          python - <<'PY'
          import json
          import glob
          import sys
          from jsonschema import validate, ValidationError, SchemaError

          # Load schema
          schema_path = ".github/json_schema.json"
          try:
              with open(schema_path, "r", encoding="utf-8") as sf:
                  schema = json.load(sf)
          except FileNotFoundError:
              print(f"⚠️ Schema file not found at {schema_path}. Schema validation will be skipped.")
              schema = None
          except json.JSONDecodeError as e:
              print(f"❌ Schema file {schema_path} is not valid JSON: {e}")
              sys.exit(1)

          files = [f for f in glob.glob("**/*.json", recursive=True)
                   if not f.startswith(".git/")]

          # Skip the schema file itself from validation
          files_to_validate = [f for f in files if f != schema_path]

          if not files_to_validate:
              print("No JSON files found (excluding schema).")
              sys.exit(0)

          failed = False
          for f in sorted(files_to_validate):
              try:
                  with open(f, "r", encoding="utf-8") as fh:
                      data = json.load(fh)
                  print(f"✅ {f} — valid JSON syntax")
              except json.JSONDecodeError as e:
                  print(f"❌ {f} — invalid JSON syntax: {e}")
                  failed = True
                  continue

              if schema is not None:
                  try:
                      validate(instance=data, schema=schema)
                      print(f"   ✅ {f} — matches schema")
                  except ValidationError as e:
                      # show context: message and the path within the instance
                      instance_path = list(e.path)
                      print(f"   ❌ {f} — schema validation error: {e.message}")
                      if instance_path:
                          print(f"       instance path: {'/'.join(map(str, instance_path))}")
                      failed = True
                  except SchemaError as se:
                      print(f"❌ Schema is invalid: {se}")
                      sys.exit(1)

          sys.exit(1 if failed else 0)
          PY
